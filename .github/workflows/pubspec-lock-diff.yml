name: Pubspec.Lock Diff

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**/pubspec.lock'

  # TODO: 検証用のため、検証完了次第削除する
  # push:
  #   branches:
  #     - feature/GH-377
  workflow_dispatch: {}

jobs:
  pubspec-diff:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      # https://github.com/marketplace/actions/checkout
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Create a diff of pubspec.lock
        id: create_diff_lock
        shell: bash
        run: |
          git fetch origin main
          main_sha=$(git log origin/main -n 1 --pretty=format:"%H" -- pubspec.lock)
          echo "Latest commit SHA for pubspeck.lock on main branch: $main_sha"

          current_sha=$(git log origin/${{ github.ref_name }} -n 1 --pretty=format:"%H" -- pubspec.lock)
          echo "Latest commit SHA for pubspeck.lock on main branch: ${{ github.ref_name }}"

          # NOTE: 「File name too long」とエラーが発生するため、ファイルに出力し、以降の処理はファイル参照とする
          head_tmpfile=$(mktemp)
          cat pubspec.lock | yq -o json | jq -S > $head_tmpfile

          echo "diff_output check"

          diff_output=$(git diff $main_sha..$current_sha -- pubspec.lock | grep -oE 'sha256:\s*"?[a-fA-F0-9]{64}"?' | sed -E 's/sha256:\s*"?(.*)"?/\1/')


          echo "diff_output: $diff_output"

          results_file=()

          # 変更があったパッケージのsha256を出力する
          if [ -n "$edit_sha" ]; then
            echo "Changed packages SHA hashes: $edit_sha"

            echo $edit_sha | while read -r hash; do
                if [ -n "$hash" ]; then
                  package_info=$(jq --arg sha "$hash" '
                    .packages | to_entries[] | 
                    select(.value.description | type == "object") | 
                    select(.value.description.sha256 == $sha) | 
                    {package: .key, version: .value.version}
                  ' "$head_tmpfile")
        
                  if [ -n "$package_info" ]; then
                    # JSON形式の配列に追加する
                    if [ ${#results_file[@]} -eq 0 ]; then
                      results_file="[$package_info]"
                    else
                      # 既存の配列の末尾の "]" を削除して新しい要素を追加
                      results_file="${results_file%]}, $package_info]"
                    fi
          
                    echo "Package: $(echo "$package_info" | jq -r '.package') Version: $(echo "$package_info" | jq -r '.version')"
                  fi
                fi
              done

              echo "lock_diff=$results_file" >> "$GITHUB_OUTPUT"
            else
              echo "No package changes detected"
            fi

      - name: Check the Diff of pubspec.yaml
        id: check_diff_yaml
        if: steps.create_diff_lock.outputs.lock_diff != ''
        run: |
          results_file=()
          
          echo "$json" | jq -c '.[]' | while read -r item; do
          
            package=$(echo "$item" | jq -r '.package')
            version=$(echo "$item" | jq -r '.version')
          
            package_info=$(cat sample.json | jq -c --arg pkg "$package" --arg ver "$version" '
              (.dev_dependencies // {}) as $dev_deps |
              (.dependencies // {}) as $deps |
              (.dependency_overrides // {}) as $overrides |
              (.melos.command.bootstrap.dependencies // {}) as $bootstrap_deps |
              (.melos.command.bootstrap.dev_dependencies // {}) as $bootstrap_dev_deps |
            [
              ($dev_deps | keys[] | select(. == $pkg and ($dev_deps[.] | sub("^\\^"; "")) != $ver) | {package: ., current_version: $dev_deps[.], desired_version: $ver}),
              ($deps | keys[] | select(. == $pkg and ($deps[.] | sub("^\\^"; "")) != $ver) | {package: ., current_version: $deps[.], desired_version: $ver}),
              ($overrides | keys[] | select(. == $pkg and ($overrides[.] | sub("^\\^"; "")) != $ver) | {package: ., current_version: $overrides[.], desired_version: $ver}),
              ($bootstrap_deps | keys[] | select(. == $pkg and ($bootstrap_deps[.] | sub("^\\^"; "")) != $ver) | {package: ., current_version: $bootstrap_deps[.], desired_version: $ver}),
              ($bootstrap_dev_deps | keys[] | select(. == $pkg and ($bootstrap_dev_deps[.] | sub("^\\^"; "")) != $ver) | {package: ., current_version: $bootstrap_dev_deps[.], desired_version: $ver})
            ] | .[]')
           
            if [ ${#results_file[@]} -eq 0 ]; then
              results_file="[$package_info]"
            else
              # 既存の配列の末尾の "]" を削除して新しい要素を追加
              results_file="${results_file%]}, $package_info]"
            fi
          done

          echo $results_file
          echo "yaml_diff=$results_file" >> "$GITHUB_OUTPUT"
      
      - name: Create PR comment
        if: steps.check_diff_yaml.outputs.lock_diff != ''
        run: |
          messages=()
          
          echo "${{ steps.check_diff_yaml.outputs.lock_diff }}" | jq -c '.[]' | while read -r item; do
            package=$(echo "$item" | jq -r '.package')
            current_version=$(echo "$item" | jq -r '.current_version')
            desired_version=$(echo "$item" | jq -r '.desired_version')
            
            messages+="check package $package as it has changed from $current_version to $desired_version."
          done
          
          joined=$(printf "%s\n" "${messages[@]}")
          
          echo $joined

          gh pr comment ${{ github.event.number }} --body $joined
